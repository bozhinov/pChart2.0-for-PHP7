<?php

namespace pChart\Barcodes\Encoders;

class Codes {

	public function code_39_encode($data)
	{
		$data = strtoupper(preg_replace('/[^0-9A-Za-z%$\/+ .-]/', '', $data));
		$blocks = [];
		/* Start */
		$blocks[] = [
			'm' => [
				[1, 1, 1], [0, 1, 2], [1, 1, 1],
				[0, 1, 1], [1, 1, 2], [0, 1, 1],
				[1, 1, 2], [0, 1, 1], [1, 1, 1],
			],
			'l' => ['*']
		];
		/* Data */
		for ($i = 0, $n = strlen($data); $i < $n; $i++) {
			$blocks[] = [
				'm' => [[0, 1, 3]]
			];
			$char = substr($data, $i, 1);
			$block = $this->code_39_alphabet[$char];
			$blocks[] = [
				'm' => [
					[1, 1, $block[0]],
					[0, 1, $block[1]],
					[1, 1, $block[2]],
					[0, 1, $block[3]],
					[1, 1, $block[4]],
					[0, 1, $block[5]],
					[1, 1, $block[6]],
					[0, 1, $block[7]],
					[1, 1, $block[8]],
				],
				'l' => [$char]
			];
		}
		$blocks[] = [
			'm' => [[0, 1, 3]]
		];
		/* End */
		$blocks[] = [
			'm' => [
				[1, 1, 1], [0, 1, 2], [1, 1, 1],
				[0, 1, 1], [1, 1, 2], [0, 1, 1],
				[1, 1, 2], [0, 1, 1], [1, 1, 1],
			],
			'l' => ['*']
		];
		/* Return */
		return $blocks;
	}

	public function code_39_ascii_encode($data)
	{
		$modules = [
			[1, 1, 1], [0, 1, 2], [1, 1, 1],
			[0, 1, 1], [1, 1, 2], [0, 1, 1],
			[1, 1, 2], [0, 1, 1], [1, 1, 1]
		];
		/* Data */
		$label = '';
		for ($i = 0, $n = strlen($data); $i < $n; $i++) {
			$char = substr($data, $i, 1);
			$ch = ord($char);
			if ($ch < 128) {
				if ($ch < 32 || $ch >= 127) {
					$label .= ' ';
				} else {
					$label .= $char;
				}
				$ch = $this->code_39_asciibet[$ch];
				for ($j = 0, $m = strlen($ch); $j < $m; $j++) {
					$c = substr($ch, $j, 1);
					$b = $this->code_39_alphabet[$c];
					$modules[] = [0, 1, 3];
					$modules[] = [1, 1, $b[0]];
					$modules[] = [0, 1, $b[1]];
					$modules[] = [1, 1, $b[2]];
					$modules[] = [0, 1, $b[3]];
					$modules[] = [1, 1, $b[4]];
					$modules[] = [0, 1, $b[5]];
					$modules[] = [1, 1, $b[6]];
					$modules[] = [0, 1, $b[7]];
					$modules[] = [1, 1, $b[8]];
				}
			}
		}
		$modules[] = [0, 1, 3];
		/* End */
		$modules[] = [1, 1, 1];
		$modules[] = [0, 1, 2];
		$modules[] = [1, 1, 1];
		$modules[] = [0, 1, 1];
		$modules[] = [1, 1, 2];
		$modules[] = [0, 1, 1];
		$modules[] = [1, 1, 2];
		$modules[] = [0, 1, 1];
		$modules[] = [1, 1, 1];

		return [['m' => $modules, 'l' => [$label]]];
	}

	public function code_93_encode($data)
	{
		$data = strtoupper(preg_replace('/[^0-9A-Za-z%+\/$ .-]/', '', $data));
		$modules = [
			[1, 1, 1], [0, 1, 1], [1, 1, 1],
			[0, 1, 1], [1, 4, 1], [0, 1, 1]
		];
		/* Data */
		$values = [];
		for ($i = 0, $n = strlen($data); $i < $n; $i++) {
			$char = substr($data, $i, 1);
			$block = $this->code_93_alphabet[$char];
			$modules[] = [1, $block[0], 1];
			$modules[] = [0, $block[1], 1];
			$modules[] = [1, $block[2], 1];
			$modules[] = [0, $block[3], 1];
			$modules[] = [1, $block[4], 1];
			$modules[] = [0, $block[5], 1];
			$values[] = $block[6];
		}
		/* Check Digits */
		for ($i = 0; $i < 2; $i++) {
			$index = count($values);
			$weight = 0;
			$checksum = 0;
			while ($index) {
				$index--;
				$weight++;
				$checksum += $weight * $values[$index];
				$checksum %= 47;
				$weight %= ($i ? 15 : 20);
			}
			$values[] = $checksum;
		}
		$alphabet = array_values($this->code_93_alphabet);
		for ($i = count($values) - 2, $n = count($values); $i < $n; $i++) {
			$block = $alphabet[$values[$i]];
			$modules[] = [1, $block[0], 1];
			$modules[] = [0, $block[1], 1];
			$modules[] = [1, $block[2], 1];
			$modules[] = [0, $block[3], 1];
			$modules[] = [1, $block[4], 1];
			$modules[] = [0, $block[5], 1];
		}
		/* End */
		$modules[] = [1, 1, 1];
		$modules[] = [0, 1, 1];
		$modules[] = [1, 1, 1];
		$modules[] = [0, 1, 1];
		$modules[] = [1, 4, 1];
		$modules[] = [0, 1, 1];
		$modules[] = [1, 1, 1];

		return [['m' => $modules, 'l' => [$data]]];
	}

	public function code_93_ascii_encode($data)
	{
		$modules = [
			[1, 1, 1],[0, 1, 1],[1, 1, 1],
			[0, 1, 1],[1, 4, 1],[0, 1, 1]
		];
		/* Data */
		$label = '';
		$values = [];
		for ($i = 0, $n = strlen($data); $i < $n; $i++) {
			$char = substr($data, $i, 1);
			$ch = ord($char);
			if ($ch < 128) {
				if ($ch < 32 || $ch >= 127) {
					$label .= ' ';
				} else {
					$label .= $char;
				}
				$ch = $this->code_93_asciibet[$ch];
				for ($j = 0, $m = strlen($ch); $j < $m; $j++) {
					$c = substr($ch, $j, 1);
					$b = $this->code_93_alphabet[$c];
					$modules[] = [1, $b[0], 1];
					$modules[] = [0, $b[1], 1];
					$modules[] = [1, $b[2], 1];
					$modules[] = [0, $b[3], 1];
					$modules[] = [1, $b[4], 1];
					$modules[] = [0, $b[5], 1];
					$values[] = $b[6];
				}
			}
		}
		/* Check Digits */
		for ($i = 0; $i < 2; $i++) {
			$index = count($values);
			$weight = 0;
			$checksum = 0;
			while ($index) {
				$index--;
				$weight++;
				$checksum += $weight * $values[$index];
				$checksum %= 47;
				$weight %= ($i ? 15 : 20);
			}
			$values[] = $checksum;
		}
		$alphabet = array_values($this->code_93_alphabet);
		for ($i = count($values) - 2, $n = count($values); $i < $n; $i++) {
			$block = $alphabet[$values[$i]];
			$modules[] = [1, $block[0], 1];
			$modules[] = [0, $block[1], 1];
			$modules[] = [1, $block[2], 1];
			$modules[] = [0, $block[3], 1];
			$modules[] = [1, $block[4], 1];
			$modules[] = [0, $block[5], 1];
		}
		/* End */
		$modules[] = [1, 1, 1];
		$modules[] = [0, 1, 1];
		$modules[] = [1, 1, 1];
		$modules[] = [0, 1, 1];
		$modules[] = [1, 4, 1];
		$modules[] = [0, 1, 1];
		$modules[] = [1, 1, 1];

		return [['m' => $modules, 'l' => [$label]]];
	}

	private $code_39_alphabet = [
		'1' => [2, 1, 1, 2, 1, 1, 1, 1, 2],
		'2' => [1, 1, 2, 2, 1, 1, 1, 1, 2],
		'3' => [2, 1, 2, 2, 1, 1, 1, 1, 1],
		'4' => [1, 1, 1, 2, 2, 1, 1, 1, 2],
		'5' => [2, 1, 1, 2, 2, 1, 1, 1, 1],
		'6' => [1, 1, 2, 2, 2, 1, 1, 1, 1],
		'7' => [1, 1, 1, 2, 1, 1, 2, 1, 2],
		'8' => [2, 1, 1, 2, 1, 1, 2, 1, 1],
		'9' => [1, 1, 2, 2, 1, 1, 2, 1, 1],
		'0' => [1, 1, 1, 2, 2, 1, 2, 1, 1],
		'A' => [2, 1, 1, 1, 1, 2, 1, 1, 2],
		'B' => [1, 1, 2, 1, 1, 2, 1, 1, 2],
		'C' => [2, 1, 2, 1, 1, 2, 1, 1, 1],
		'D' => [1, 1, 1, 1, 2, 2, 1, 1, 2],
		'E' => [2, 1, 1, 1, 2, 2, 1, 1, 1],
		'F' => [1, 1, 2, 1, 2, 2, 1, 1, 1],
		'G' => [1, 1, 1, 1, 1, 2, 2, 1, 2],
		'H' => [2, 1, 1, 1, 1, 2, 2, 1, 1],
		'I' => [1, 1, 2, 1, 1, 2, 2, 1, 1],
		'J' => [1, 1, 1, 1, 2, 2, 2, 1, 1],
		'K' => [2, 1, 1, 1, 1, 1, 1, 2, 2],
		'L' => [1, 1, 2, 1, 1, 1, 1, 2, 2],
		'M' => [2, 1, 2, 1, 1, 1, 1, 2, 1],
		'N' => [1, 1, 1, 1, 2, 1, 1, 2, 2],
		'O' => [2, 1, 1, 1, 2, 1, 1, 2, 1],
		'P' => [1, 1, 2, 1, 2, 1, 1, 2, 1],
		'Q' => [1, 1, 1, 1, 1, 1, 2, 2, 2],
		'R' => [2, 1, 1, 1, 1, 1, 2, 2, 1],
		'S' => [1, 1, 2, 1, 1, 1, 2, 2, 1],
		'T' => [1, 1, 1, 1, 2, 1, 2, 2, 1],
		'U' => [2, 2, 1, 1, 1, 1, 1, 1, 2],
		'V' => [1, 2, 2, 1, 1, 1, 1, 1, 2],
		'W' => [2, 2, 2, 1, 1, 1, 1, 1, 1],
		'X' => [1, 2, 1, 1, 2, 1, 1, 1, 2],
		'Y' => [2, 2, 1, 1, 2, 1, 1, 1, 1],
		'Z' => [1, 2, 2, 1, 2, 1, 1, 1, 1],
		'-' => [1, 2, 1, 1, 1, 1, 2, 1, 2],
		'.' => [2, 2, 1, 1, 1, 1, 2, 1, 1],
		' ' => [1, 2, 2, 1, 1, 1, 2, 1, 1],
		'*' => [1, 2, 1, 1, 2, 1, 2, 1, 1],
		'+' => [1, 2, 1, 1, 1, 2, 1, 2, 1],
		'/' => [1, 2, 1, 2, 1, 1, 1, 2, 1],
		'$' => [1, 2, 1, 2, 1, 2, 1, 1, 1],
		'%' => [1, 1, 1, 2, 1, 2, 1, 2, 1]
	];

	private $code_39_asciibet = [
		'%U', '$A', '$B', '$C', '$D', '$E', '$F', '$G',
		'$H', '$I', '$J', '$K', '$L', '$M', '$N', '$O',
		'$P', '$Q', '$R', '$S', '$T', '$U', '$V', '$W',
		'$X', '$Y', '$Z', '%A', '%B', '%C', '%D', '%E',
		' ' , '/A', '/B', '/C', '/D', '/E', '/F', '/G',
		'/H', '/I', '/J', '/K', '/L', '-' , '.' , '/O',
		'0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' ,
		'8' , '9' , '/Z', '%F', '%G', '%H', '%I', '%J',
		'%V', 'A' , 'B' , 'C' , 'D' , 'E' , 'F' , 'G' ,
		'H' , 'I' , 'J' , 'K' , 'L' , 'M' , 'N' , 'O' ,
		'P' , 'Q' , 'R' , 'S' , 'T' , 'U' , 'V' , 'W' ,
		'X' , 'Y' , 'Z' , '%K', '%L', '%M', '%N', '%O',
		'%W', '+A', '+B', '+C', '+D', '+E', '+F', '+G',
		'+H', '+I', '+J', '+K', '+L', '+M', '+N', '+O',
		'+P', '+Q', '+R', '+S', '+T', '+U', '+V', '+W',
		'+X', '+Y', '+Z', '%P', '%Q', '%R', '%S', '%T'
	];

	private $code_93_alphabet = [
		'0' => [1, 3, 1, 1, 1, 2,  0],
		'1' => [1, 1, 1, 2, 1, 3,  1],
		'2' => [1, 1, 1, 3, 1, 2,  2],
		'3' => [1, 1, 1, 4, 1, 1,  3],
		'4' => [1, 2, 1, 1, 1, 3,  4],
		'5' => [1, 2, 1, 2, 1, 2,  5],
		'6' => [1, 2, 1, 3, 1, 1,  6],
		'7' => [1, 1, 1, 1, 1, 4,  7],
		'8' => [1, 3, 1, 2, 1, 1,  8],
		'9' => [1, 4, 1, 1, 1, 1,  9],
		'A' => [2, 1, 1, 1, 1, 3, 10],
		'B' => [2, 1, 1, 2, 1, 2, 11],
		'C' => [2, 1, 1, 3, 1, 1, 12],
		'D' => [2, 2, 1, 1, 1, 2, 13],
		'E' => [2, 2, 1, 2, 1, 1, 14],
		'F' => [2, 3, 1, 1, 1, 1, 15],
		'G' => [1, 1, 2, 1, 1, 3, 16],
		'H' => [1, 1, 2, 2, 1, 2, 17],
		'I' => [1, 1, 2, 3, 1, 1, 18],
		'J' => [1, 2, 2, 1, 1, 2, 19],
		'K' => [1, 3, 2, 1, 1, 1, 20],
		'L' => [1, 1, 1, 1, 2, 3, 21],
		'M' => [1, 1, 1, 2, 2, 2, 22],
		'N' => [1, 1, 1, 3, 2, 1, 23],
		'O' => [1, 2, 1, 1, 2, 2, 24],
		'P' => [1, 3, 1, 1, 2, 1, 25],
		'Q' => [2, 1, 2, 1, 1, 2, 26],
		'R' => [2, 1, 2, 2, 1, 1, 27],
		'S' => [2, 1, 1, 1, 2, 2, 28],
		'T' => [2, 1, 1, 2, 2, 1, 29],
		'U' => [2, 2, 1, 1, 2, 1, 30],
		'V' => [2, 2, 2, 1, 1, 1, 31],
		'W' => [1, 1, 2, 1, 2, 2, 32],
		'X' => [1, 1, 2, 2, 2, 1, 33],
		'Y' => [1, 2, 2, 1, 2, 1, 34],
		'Z' => [1, 2, 3, 1, 1, 1, 35],
		'-' => [1, 2, 1, 1, 3, 1, 36],
		'.' => [3, 1, 1, 1, 1, 2, 37],
		' ' => [3, 1, 1, 2, 1, 1, 38],
		'$' => [3, 2, 1, 1, 1, 1, 39],
		'/' => [1, 1, 2, 1, 3, 1, 40],
		'+' => [1, 1, 3, 1, 2, 1, 41],
		'%' => [2, 1, 1, 1, 3, 1, 42],
		'#' => [1, 2, 1, 2, 2, 1, 43], /* ($] */
		'&' => [3, 1, 2, 1, 1, 1, 44], /* (%] */
		'|' => [3, 1, 1, 1, 2, 1, 45], /* (/] */
		'=' => [1, 2, 2, 2, 1, 1, 46], /* (+] */
		'*' => [1, 1, 1, 1, 4, 1,  0]
	];

	private $code_93_asciibet = [
		'&U', '#A', '#B', '#C', '#D', '#E', '#F', '#G',
		'#H', '#I', '#J', '#K', '#L', '#M', '#N', '#O',
		'#P', '#Q', '#R', '#S', '#T', '#U', '#V', '#W',
		'#X', '#Y', '#Z', '&A', '&B', '&C', '&D', '&E',
		' ' , '|A', '|B', '|C', '$' , '%' , '|F', '|G',
		'|H', '|I', '|J', '+' , '|L', '-' , '.' , '/' ,
		'0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' ,
		'8' , '9' , '|Z', '&F', '&G', '&H', '&I', '&J',
		'&V', 'A' , 'B' , 'C' , 'D' , 'E' , 'F' , 'G' ,
		'H' , 'I' , 'J' , 'K' , 'L' , 'M' , 'N' , 'O' ,
		'P' , 'Q' , 'R' , 'S' , 'T' , 'U' , 'V' , 'W' ,
		'X' , 'Y' , 'Z' , '&K', '&L', '&M', '&N', '&O',
		'&W', '=A', '=B', '=C', '=D', '=E', '=F', '=G',
		'=H', '=I', '=J', '=K', '=L', '=M', '=N', '=O',
		'=P', '=Q', '=R', '=S', '=T', '=U', '=V', '=W',
		'=X', '=Y', '=Z', '&P', '&Q', '&R', '&S', '&T'
	];

	public function code_128_encode($data, $dstate, $fnc1)
	{
		$data = preg_replace('/[\x80-\xFF]/', '', $data);
		$label = preg_replace('/[\x00-\x1F\x7F]/', ' ', $data);
		$chars = $this->code_128_normalize($data, $dstate, $fnc1);
		$checksum = $chars[0] % 103;

		for ($i = 1, $n = count($chars); $i < $n; $i++) {
			$checksum += $i * $chars[$i];
			$checksum %= 103;
		}

		$chars[] = $checksum;
		$chars[] = 106;
		$modules = [];
		$modules[] = [0, 10, 0];

		foreach ($chars as $char) {
			$block = $this->code_128_alphabet[$char];
			foreach ($block as $i => $module) {
				$modules[] = [($i & 1) ^ 1, $module, 1];
			}
		}

		$modules[] = [0, 10, 0];

		return [['m' => $modules, 'l' => [$label]]];
	}

	public function code_128_normalize($data, $dstate, $fnc1)
	{
		$detectcba = '/(^[0-9]{4,}|^[0-9]{2}$)|([\x60-\x7F])|([\x00-\x1F])/';
		$detectc = '/(^[0-9]{6,}|^[0-9]{4,}$)/';
		$detectba = '/([\x60-\x7F])|([\x00-\x1F])/';
		$consumec = '/(^[0-9]{2})/';
		$state = (($dstate > 0 && $dstate < 4) ? $dstate : 0);
		$abstate = ((abs($dstate) == 2) ? 2 : 1);
		$chars = [102 + ($state ? $state : $abstate)];

		if ($fnc1) {
			$chars[] = 102;
		}

		while (strlen($data)) {
			switch ($state) {
				case 0:
					if (preg_match($detectcba, $data, $m)) {
						if ($m[1]) {
							$state = 3;
						} else if ($m[2]) {
							$state = 2;
						} else {
							$state = 1;
						}
					} else {
						$state = $abstate;
					}
					$chars = [102 + $state];
					if ($fnc1) {
						$chars[] = 102;
					}
					break;
				case 1:
					if ($dstate <= 0 && preg_match($detectc, $data, $m)) {
						if (strlen($m[0]) % 2) {
							$data = substr($data, 1);
							$chars[] = 16 + substr($m[0], 0, 1);
						}
						$state = 3;
						$chars[] = 99;
					} else {
						$ch = ord(substr($data, 0, 1));
						$data = substr($data, 1);
						if ($ch < 32) {
							$chars[] = $ch + 64;
						} else if ($ch < 96) {
							$chars[] = $ch - 32;
						} else {
							if (preg_match($detectba, $data, $m)) {
								if ($m[1]) {
									$state = 2;
									$chars[] = 100;
								} else {
									$chars[] = 98;
								}
							} else {
								$chars[] = 98;
							}
							$chars[] = $ch - 32;
						}
					}
					break;
				case 2:
					if ($dstate <= 0 && preg_match($detectc, $data, $m)) {
						if (strlen($m[0]) % 2) {
							$data = substr($data, 1);
							$chars[] = 16 + substr($m[0], 0, 1);
						}
						$state = 3;
						$chars[] = 99;
					} else {
						$ch = ord(substr($data, 0, 1));
						$data = substr($data, 1);
						if ($ch >= 32) {
							$chars[] = $ch - 32;
						} else {
							if (preg_match($detectba, $data, $m)) {
								if ($m[2]) {
									$state = 1;
									$chars[] = 101;
								} else {
									$chars[] = 98;
								}
							} else {
								$chars[] = 98;
							}
							$chars[] = $ch + 64;
						}
					}
					break;
				case 3:
					if (preg_match($consumec, $data, $m)) {
						$data = substr($data, 2);
						$chars[] = (int)$m[0];
					} else {
						if (preg_match($detectba, $data, $m)) {
							$state = ($m[1]) ? 2 : 1;
						} else {
							$state = $abstate;
						}
						$chars[] = 102 - $state;
					}
					break;
			}
		}
		return $chars;
	}

	private $code_128_alphabet = [
		[2, 1, 2, 2, 2, 2], [2, 2, 2, 1, 2, 2],
		[2, 2, 2, 2, 2, 1], [1, 2, 1, 2, 2, 3],
		[1, 2, 1, 3, 2, 2], [1, 3, 1, 2, 2, 2],
		[1, 2, 2, 2, 1, 3], [1, 2, 2, 3, 1, 2],
		[1, 3, 2, 2, 1, 2], [2, 2, 1, 2, 1, 3],
		[2, 2, 1, 3, 1, 2], [2, 3, 1, 2, 1, 2],
		[1, 1, 2, 2, 3, 2], [1, 2, 2, 1, 3, 2],
		[1, 2, 2, 2, 3, 1], [1, 1, 3, 2, 2, 2],
		[1, 2, 3, 1, 2, 2], [1, 2, 3, 2, 2, 1],
		[2, 2, 3, 2, 1, 1], [2, 2, 1, 1, 3, 2],
		[2, 2, 1, 2, 3, 1], [2, 1, 3, 2, 1, 2],
		[2, 2, 3, 1, 1, 2], [3, 1, 2, 1, 3, 1],
		[3, 1, 1, 2, 2, 2], [3, 2, 1, 1, 2, 2],
		[3, 2, 1, 2, 2, 1], [3, 1, 2, 2, 1, 2],
		[3, 2, 2, 1, 1, 2], [3, 2, 2, 2, 1, 1],
		[2, 1, 2, 1, 2, 3], [2, 1, 2, 3, 2, 1],
		[2, 3, 2, 1, 2, 1], [1, 1, 1, 3, 2, 3],
		[1, 3, 1, 1, 2, 3], [1, 3, 1, 3, 2, 1],
		[1, 1, 2, 3, 1, 3], [1, 3, 2, 1, 1, 3],
		[1, 3, 2, 3, 1, 1], [2, 1, 1, 3, 1, 3],
		[2, 3, 1, 1, 1, 3], [2, 3, 1, 3, 1, 1],
		[1, 1, 2, 1, 3, 3], [1, 1, 2, 3, 3, 1],
		[1, 3, 2, 1, 3, 1], [1, 1, 3, 1, 2, 3],
		[1, 1, 3, 3, 2, 1], [1, 3, 3, 1, 2, 1],
		[3, 1, 3, 1, 2, 1], [2, 1, 1, 3, 3, 1],
		[2, 3, 1, 1, 3, 1], [2, 1, 3, 1, 1, 3],
		[2, 1, 3, 3, 1, 1], [2, 1, 3, 1, 3, 1],
		[3, 1, 1, 1, 2, 3], [3, 1, 1, 3, 2, 1],
		[3, 3, 1, 1, 2, 1], [3, 1, 2, 1, 1, 3],
		[3, 1, 2, 3, 1, 1], [3, 3, 2, 1, 1, 1],
		[3, 1, 4, 1, 1, 1], [2, 2, 1, 4, 1, 1],
		[4, 3, 1, 1, 1, 1], [1, 1, 1, 2, 2, 4],
		[1, 1, 1, 4, 2, 2], [1, 2, 1, 1, 2, 4],
		[1, 2, 1, 4, 2, 1], [1, 4, 1, 1, 2, 2],
		[1, 4, 1, 2, 2, 1], [1, 1, 2, 2, 1, 4],
		[1, 1, 2, 4, 1, 2], [1, 2, 2, 1, 1, 4],
		[1, 2, 2, 4, 1, 1], [1, 4, 2, 1, 1, 2],
		[1, 4, 2, 2, 1, 1], [2, 4, 1, 2, 1, 1],
		[2, 2, 1, 1, 1, 4], [4, 1, 3, 1, 1, 1],
		[2, 4, 1, 1, 1, 2], [1, 3, 4, 1, 1, 1],
		[1, 1, 1, 2, 4, 2], [1, 2, 1, 1, 4, 2],
		[1, 2, 1, 2, 4, 1], [1, 1, 4, 2, 1, 2],
		[1, 2, 4, 1, 1, 2], [1, 2, 4, 2, 1, 1],
		[4, 1, 1, 2, 1, 2], [4, 2, 1, 1, 1, 2],
		[4, 2, 1, 2, 1, 1], [2, 1, 2, 1, 4, 1],
		[2, 1, 4, 1, 2, 1], [4, 1, 2, 1, 2, 1],
		[1, 1, 1, 1, 4, 3], [1, 1, 1, 3, 4, 1],
		[1, 3, 1, 1, 4, 1], [1, 1, 4, 1, 1, 3],
		[1, 1, 4, 3, 1, 1], [4, 1, 1, 1, 1, 3],
		[4, 1, 1, 3, 1, 1], [1, 1, 3, 1, 4, 1],
		[1, 1, 4, 1, 3, 1], [3, 1, 1, 1, 4, 1],
		[4, 1, 1, 1, 3, 1], [2, 1, 1, 4, 1, 2],
		[2, 1, 1, 2, 1, 4], [2, 1, 1, 2, 3, 2],
		[2, 3, 3, 1, 1, 1, 2]
	];

}

?>